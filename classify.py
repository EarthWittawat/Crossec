from this import d
from PIL import Image
from fastai.vision.widgets import *
from fastai.vision.all import *
from torchvision import models, transforms
import torch
import streamlit as st
import time
import os
import os.path
import urllib.request
from pathlib import Path
from csv import writer
import pathlib

st.set_page_config(
    page_title="Crossec ML",
    layout="wide",
)  
with st.sidebar:
    st.image('Logo.png',width=100)
    st.image('aib.png',width=100)
    st.header("About this Project‚úî")
    st.write("Project ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ [AI Builder 2022](https://ai-builders.github.io/) ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥ Dataset ‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà [Open Source](https://www.kaggle.com/datasets/earthwttw/plant-tissue-cross-section-dataset) ‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Kaggle",unsafe_allow_html=True)
    st.header("Developerüë®‚Äçüíª")
    st.text("Wittawat Kitipatthavorn\nNawapat Jongaouyporn\nSorraat Treenuson")
file_exists = os.path.exists('crossec_model.pkl')

plt = platform.system()
if plt == 'Windows': pathlib.PosixPath = pathlib.WindowsPath

@st.cache(allow_output_mutation=True,show_spinner=False,ttl=1800,max_entries=2,persist=True)
def load_model(): return load_learner(Path()/'crossec_model.pkl',cpu=True)

tissue = [
'‡∏£‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥', '‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥', '‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏∏‡∏ï‡∏¥‡∏¢‡∏†‡∏π‡∏°‡∏¥','‡∏£‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏°‡∏¥','‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥'
]

def predict(image, learn):
        """Return top 5 predictions ranked by highest probability.
        Parameters
        ----------
        :param image: uploaded image
        :type image: jpg
        :rtype: list
        :return: top 5 predictions ranked by highest probability
        """
        # create a ResNet model
        pred, pred_idx, pred_prob = learn.predict(image)

        classes = tissue[int(pred_idx)]
        
        return [(classes, pred_prob[pred_idx])]


image = Image.open('Logo.png')

with st.container():
    st.image(image,width=200)

    st.subheader("Let's make cross section easier!")
    st.write("")
    file_up = st.file_uploader("Upload an image", type = "jpeg,jpg")
    if file_up is not None:
        image = PILImage.create(file_up)
        st.image(image, caption = 'Uploaded Image.', use_column_width = True)
        st.write("")
        labels = predict(image,load_model())

        score = labels[0][1]
            # print out the top 5 prediction labels with scores
        if st.success(f"Result: {labels[0][0]} {score*100:.02f}%"):
            st.write("")
            
            with st.expander("‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô"):
                name = st.text_input('‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•')
                room = st.selectbox(
                    '‡∏´‡πâ‡∏≠‡∏á',
                    ['‡∏°.5/1','‡∏°.5/2','‡∏°.5/3','‡∏°.5/11']
                )
                num = st.text_input('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà')
                tissue = st.selectbox(
                    '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£',
                [
'‡πÉ‡∏ö‡∏û‡∏∑‡∏ä C3', '‡πÉ‡∏ö‡∏û‡∏∑‡∏ä C4', '‡∏£‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥','‡∏£‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏∏‡∏ï‡∏¥‡∏¢‡∏†‡∏π‡∏°‡∏¥','‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥','‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏∏‡∏ï‡∏¥‡∏¢‡∏†‡∏π‡∏°‡∏¥','‡∏£‡∏≤‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥','‡∏•‡∏≥‡∏ï‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏ê‡∏°‡∏†‡∏π‡∏°‡∏¥'
]
                )
                user={'Name':name,'Room':room,'Number':num}
                if st.button('Send'):
                    if name != "" and num != "":
                    #     noobcopycatch = glob.glob('./predicted/'+ labels[0][0]+'/'+file_up.name)
                    #     if noobcopycatch != []:
                    #         st.write("‡∏≠‡∏¢‡πà‡∏≤‡πÇ‡∏Å‡∏á‡∏á‡∏á‡∏á")
                    #     else:
                    #         count = 0
                    #         path = './predicted/' + labels[0][0]
                    #         isExist = os.path.exists(path)
                    #         if not isExist:
                    # # Create a new directory because it does not exist 
                    #             os.makedirs(path)
                    #         for root_dir, cur_dir, files in os.walk(r'.\predicted'):
                    #             count += len(files)
                    #         with open(os.path.join(path,file_up.name), "wb") as f:
                    #             f.write(file_up.getbuffer())
                    #         st.success(user['Name']+ " ‡∏ä‡∏±‡πâ‡∏ô " + user['Room']+ " ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà " +user['Number']+" ‡∏™‡πà‡∏á "+labels[0][0]+" ‡πÅ‡∏•‡πâ‡∏ß")
                        count = 0
                        path = './predicted/'+ room + '/' + name + '/' + tissue
                        isExist = os.path.exists(path)
                        if not isExist:
                                os.makedirs(path)
                        for root_dir, cur_dir, files in os.walk(r'.\predicted'):
                                count += len(files)
                        with open(os.path.join(path,file_up.name), "wb") as f:
                                f.write(file_up.getbuffer())
                        cpt = sum([len(files) for r, d, files in os.walk(path)]) -1
                        os.rename(f"{path}/{file_up.name}",f'{path}/{cpt}.jpg')
                        st.success(user['Name']+ " ‡∏ä‡∏±‡πâ‡∏ô " + user['Room']+ " ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà " +user['Number']+" ‡∏™‡πà‡∏á "+labels[0][0]+" ‡πÅ‡∏•‡πâ‡∏ß")
                        path=os.path.join(room+'.csv')
                        with open(path, 'a',encoding="utf-8") as csvfile:
                            writer_object = writer(csvfile)
                    
                        # Pass the list as an argument into
                        # the writerow()
                            writer_object.writerow([name,room,num,tissue])
                            csvfile.close()
                    else:
                        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô") 
                # enable users to upload images for the model to make predictions
            st.write("")
with st.container():
    cpt = sum([len(files) for r, d, files in os.walk('./predicted/')])
    st.metric(label="Image Predicted", value=cpt, delta=1)